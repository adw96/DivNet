// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigen_mc_array
std::vector<Rcpp::NumericMatrix> eigen_mc_array(const Rcpp::NumericMatrix r_logratios, const Rcpp::NumericMatrix r_counts, const Rcpp::NumericMatrix r_expected_logratios, const int base_otu, const Rcpp::NumericMatrix r_sigma_inverse, const int mc_iters, const double stepsize);
RcppExport SEXP _DivNet_eigen_mc_array(SEXP r_logratiosSEXP, SEXP r_countsSEXP, SEXP r_expected_logratiosSEXP, SEXP base_otuSEXP, SEXP r_sigma_inverseSEXP, SEXP mc_itersSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type r_logratios(r_logratiosSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type r_counts(r_countsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type r_expected_logratios(r_expected_logratiosSEXP);
    Rcpp::traits::input_parameter< const int >::type base_otu(base_otuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type r_sigma_inverse(r_sigma_inverseSEXP);
    Rcpp::traits::input_parameter< const int >::type mc_iters(mc_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_mc_array(r_logratios, r_counts, r_expected_logratios, base_otu, r_sigma_inverse, mc_iters, stepsize));
    return rcpp_result_gen;
END_RCPP
}
// start_profiler
SEXP start_profiler(SEXP str);
RcppExport SEXP _DivNet_start_profiler(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(start_profiler(str));
    return rcpp_result_gen;
END_RCPP
}
// stop_profiler
SEXP stop_profiler();
RcppExport SEXP _DivNet_stop_profiler() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stop_profiler());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DivNet_eigen_mc_array", (DL_FUNC) &_DivNet_eigen_mc_array, 7},
    {"_DivNet_start_profiler", (DL_FUNC) &_DivNet_start_profiler, 1},
    {"_DivNet_stop_profiler", (DL_FUNC) &_DivNet_stop_profiler, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_DivNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
