// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_Y_new_and_sigSum
Rcpp::List get_Y_new_and_sigSum(const int num_samples, const Eigen::MatrixXd& Y, const Eigen::MatrixXd& W, const Eigen::MatrixXd& eY, const int base, const Eigen::MatrixXd& sigInv, const int mciters, const int iters_to_burn, const double stepsize);
RcppExport SEXP _DivNet_get_Y_new_and_sigSum(SEXP num_samplesSEXP, SEXP YSEXP, SEXP WSEXP, SEXP eYSEXP, SEXP baseSEXP, SEXP sigInvSEXP, SEXP mcitersSEXP, SEXP iters_to_burnSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type eY(eYSEXP);
    Rcpp::traits::input_parameter< const int >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigInv(sigInvSEXP);
    Rcpp::traits::input_parameter< const int >::type mciters(mcitersSEXP);
    Rcpp::traits::input_parameter< const int >::type iters_to_burn(iters_to_burnSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Y_new_and_sigSum(num_samples, Y, W, eY, base, sigInv, mciters, iters_to_burn, stepsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DivNet_get_Y_new_and_sigSum", (DL_FUNC) &_DivNet_get_Y_new_and_sigSum, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_DivNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
