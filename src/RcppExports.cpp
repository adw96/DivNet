// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// run_mc
Rcpp::List run_mc(const Rcpp::NumericMatrix logratios, const Rcpp::NumericMatrix counts, const Rcpp::NumericMatrix expected_logratios, const Rcpp::NumericMatrix sigma_inverse, const int base_otu, const int mc_iters, const int iters_to_burn, const double stepsize);
RcppExport SEXP _DivNet_run_mc(SEXP logratiosSEXP, SEXP countsSEXP, SEXP expected_logratiosSEXP, SEXP sigma_inverseSEXP, SEXP base_otuSEXP, SEXP mc_itersSEXP, SEXP iters_to_burnSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type logratios(logratiosSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type expected_logratios(expected_logratiosSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type sigma_inverse(sigma_inverseSEXP);
    Rcpp::traits::input_parameter< const int >::type base_otu(base_otuSEXP);
    Rcpp::traits::input_parameter< const int >::type mc_iters(mc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type iters_to_burn(iters_to_burnSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mc(logratios, counts, expected_logratios, sigma_inverse, base_otu, mc_iters, iters_to_burn, stepsize));
    return rcpp_result_gen;
END_RCPP
}
// eigen_bdc_svd
Rcpp::List eigen_bdc_svd(Rcpp::NumericMatrix mat);
RcppExport SEXP _DivNet_eigen_bdc_svd(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_bdc_svd(mat));
    return rcpp_result_gen;
END_RCPP
}
// eigen_jacobi_svd
Rcpp::List eigen_jacobi_svd(Rcpp::NumericMatrix mat);
RcppExport SEXP _DivNet_eigen_jacobi_svd(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_jacobi_svd(mat));
    return rcpp_result_gen;
END_RCPP
}
// eigen_ginv
Rcpp::NumericMatrix eigen_ginv(Rcpp::NumericMatrix mat, const double tolerance);
RcppExport SEXP _DivNet_eigen_ginv(SEXP matSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_ginv(mat, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// eigen_chol
Rcpp::NumericMatrix eigen_chol(Rcpp::NumericMatrix mat);
RcppExport SEXP _DivNet_eigen_chol(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_chol(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DivNet_run_mc", (DL_FUNC) &_DivNet_run_mc, 8},
    {"_DivNet_eigen_bdc_svd", (DL_FUNC) &_DivNet_eigen_bdc_svd, 1},
    {"_DivNet_eigen_jacobi_svd", (DL_FUNC) &_DivNet_eigen_jacobi_svd, 1},
    {"_DivNet_eigen_ginv", (DL_FUNC) &_DivNet_eigen_ginv, 2},
    {"_DivNet_eigen_chol", (DL_FUNC) &_DivNet_eigen_chol, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DivNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
