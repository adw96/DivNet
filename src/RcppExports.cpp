// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigen_MCrow
Eigen::MatrixXd eigen_MCrow(const Eigen::VectorXd Yi, const Eigen::VectorXd Wi, const Eigen::VectorXd eYi, const int Q, const int base, const Eigen::MatrixXd sigInv, const int MCiter, const double stepsize);
RcppExport SEXP _DivNet_eigen_MCrow(SEXP YiSEXP, SEXP WiSEXP, SEXP eYiSEXP, SEXP QSEXP, SEXP baseSEXP, SEXP sigInvSEXP, SEXP MCiterSEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Wi(WiSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type eYi(eYiSEXP);
    Rcpp::traits::input_parameter< const int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const int >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type sigInv(sigInvSEXP);
    Rcpp::traits::input_parameter< const int >::type MCiter(MCiterSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_MCrow(Yi, Wi, eYi, Q, base, sigInv, MCiter, stepsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DivNet_eigen_MCrow", (DL_FUNC) &_DivNet_eigen_MCrow, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_DivNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
